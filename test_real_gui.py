#!/usr/bin/env python3
"""
Script para probar la aplicaci√≥n GUI real con interacciones simuladas
"""
import sys
import os
import time
import threading
import tkinter as tk
from tkinter import messagebox

# Agregar el directorio actual al path
sys.path.append(os.path.dirname(__file__))

def test_real_gui():
    """Prueba la aplicaci√≥n GUI real"""
    print("üñ•Ô∏è INICIANDO PRUEBA DE APLICACI√ìN GUI REAL")
    print("=" * 60)
    
    try:
        # Importar la aplicaci√≥n
        from app_empleados_refactorizada import AppEmpleadosRefactorizada
        
        # Crear root de tkinter
        root = tk.Tk()
        
        # Configurar para cerrar autom√°ticamente despu√©s de 10 segundos
        def auto_close():
            time.sleep(10)
            root.quit()
        
        # Iniciar timer de cierre autom√°tico
        timer_thread = threading.Thread(target=auto_close)
        timer_thread.daemon = True
        timer_thread.start()
        
        # Inicializar la aplicaci√≥n
        print("‚úÖ Inicializando aplicaci√≥n...")
        app = AppEmpleadosRefactorizada(root)
        print("‚úÖ Aplicaci√≥n inicializada correctamente")
        
        # Verificar que se puede cambiar a la secci√≥n de conciliaci√≥n
        print("‚úÖ Cambiando a secci√≥n de conciliaci√≥n...")
        app.cambiar_contenido("conciliacion")
        print("‚úÖ Secci√≥n de conciliaci√≥n activada")
        
        # Verificar que el componente de conciliaci√≥n est√° visible
        conciliacion = app.componentes.get('conciliacion')
        if conciliacion and hasattr(conciliacion, 'frame'):
            print("‚úÖ Frame de conciliaci√≥n disponible")
            
            # Simular entrada de SID
            if hasattr(conciliacion, 'sid_var'):
                conciliacion.sid_var.set('S7457774')
                print("‚úÖ SID configurado: S7457774")
                
                # Simular conciliaci√≥n
                print("‚úÖ Ejecutando conciliaci√≥n...")
                try:
                    conciliacion._conciliar_accesos()
                    print("‚úÖ Conciliaci√≥n ejecutada exitosamente")
                    
                    # Verificar que hay resultados
                    if conciliacion.resultado_conciliacion:
                        print("‚úÖ Resultados de conciliaci√≥n obtenidos")
                        
                        # Verificar que se pueden mostrar en la tabla
                        current_access = conciliacion.resultado_conciliacion.get('current_access', [])
                        to_grant = conciliacion.resultado_conciliacion.get('to_grant', [])
                        to_revoke = conciliacion.resultado_conciliacion.get('to_revoke', [])
                        
                        print(f"‚úÖ Datos para tabla:")
                        print(f"   - Accesos actuales: {len(current_access)}")
                        print(f"   - Accesos a otorgar: {len(to_grant)}")
                        print(f"   - Accesos a revocar: {len(to_revoke)}")
                        
                        # Simular exportaci√≥n
                        print("‚úÖ Probando exportaci√≥n...")
                        try:
                            conciliacion._exportar_excel()
                            print("‚úÖ Exportaci√≥n ejecutada exitosamente")
                        except Exception as e:
                            print(f"‚ö†Ô∏è Error en exportaci√≥n (esperado en modo no interactivo): {e}")
                    else:
                        print("‚ùå No se obtuvieron resultados de conciliaci√≥n")
                        return False
                except Exception as e:
                    print(f"‚ùå Error en conciliaci√≥n: {e}")
                    return False
            else:
                print("‚ùå No se encontr√≥ variable sid_var")
                return False
        else:
            print("‚ùå No se encontr√≥ componente de conciliaci√≥n")
            return False
        
        print("‚úÖ Todas las funcionalidades GUI probadas exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba GUI real: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        try:
            root.destroy()
        except:
            pass

def test_conciliacion_workflow():
    """Prueba el flujo completo de conciliaci√≥n"""
    print("\n=== Prueba: Flujo Completo de Conciliaci√≥n ===")
    try:
        from services import access_service, export_service
        
        # 1. Obtener empleado
        print("1. Obteniendo empleado...")
        empleado = access_service.get_employee_by_id('S7457774')
        if not empleado:
            print("‚ùå Empleado no encontrado")
            return False
        print(f"‚úÖ Empleado: {empleado.get('full_name')} - {empleado.get('position')} - {empleado.get('unit')}")
        
        # 2. Ejecutar conciliaci√≥n
        print("2. Ejecutando conciliaci√≥n...")
        reporte = access_service.get_access_reconciliation_report('S7457774')
        if "error" in reporte:
            print(f"‚ùå Error en conciliaci√≥n: {reporte['error']}")
            return False
        print("‚úÖ Conciliaci√≥n ejecutada")
        
        # 3. Verificar resultados
        print("3. Verificando resultados...")
        current_access = reporte.get('current_access', [])
        to_grant = reporte.get('to_grant', [])
        to_revoke = reporte.get('to_revoke', [])
        
        print(f"   - Accesos actuales: {len(current_access)}")
        print(f"   - Accesos a otorgar: {len(to_grant)}")
        print(f"   - Accesos a revocar: {len(to_revoke)}")
        
        # 4. Adaptar datos para exportaci√≥n
        print("4. Adaptando datos para exportaci√≥n...")
        from app_empleados_refactorizada import ConciliacionFrame
        
        root = tk.Tk()
        root.withdraw()
        conciliacion_frame = ConciliacionFrame(root)
        conciliacion_frame.sid_var.set('S7457774')
        
        adapted_data = conciliacion_frame._adapt_data_for_export(reporte)
        print("‚úÖ Datos adaptados")
        
        # 5. Exportar a Excel
        print("5. Exportando a Excel...")
        output_path = export_service.export_reconciliation_tickets(
            [adapted_data],
            "Prueba de Flujo Completo"
        )
        print(f"‚úÖ Archivo exportado: {output_path}")
        
        # 6. Verificar archivo
        if os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            print(f"‚úÖ Archivo verificado: {file_size} bytes")
        else:
            print("‚ùå Archivo no encontrado")
            return False
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå Error en flujo de conciliaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_complete_tests():
    """Ejecuta todas las pruebas completas"""
    print("üß™ INICIANDO PRUEBAS COMPLETAS DEL SISTEMA")
    print("=" * 80)
    
    tests = [
        ("Flujo de Conciliaci√≥n", test_conciliacion_workflow),
        ("Aplicaci√≥n GUI Real", test_real_gui)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüîç Ejecutando: {test_name}")
        print("-" * 40)
        try:
            if test_func():
                print(f"‚úÖ {test_name}: EXITOSO")
                passed += 1
            else:
                print(f"‚ùå {test_name}: FALL√ì")
                failed += 1
        except Exception as e:
            print(f"‚ùå {test_name}: ERROR - {e}")
            failed += 1
    
    print("\n" + "=" * 80)
    print("üìä RESUMEN FINAL DE PRUEBAS")
    print("=" * 80)
    print(f"‚úÖ Pruebas exitosas: {passed}")
    print(f"‚ùå Pruebas fallidas: {failed}")
    print(f"üìà Porcentaje de √©xito: {(passed / (passed + failed)) * 100:.1f}%")
    
    if failed == 0:
        print("\nüéâ ¬°TODAS LAS PRUEBAS COMPLETAS PASARON!")
        print("‚úÖ El sistema est√° funcionando correctamente en todos los aspectos:")
        print("   - Base de datos y servicios")
        print("   - L√≥gica de conciliaci√≥n")
        print("   - Interfaz gr√°fica")
        print("   - Exportaci√≥n de Excel")
        print("   - Flujo completo de trabajo")
    else:
        print(f"\n‚ö†Ô∏è {failed} pruebas fallaron. Revisar los errores arriba.")
    
    return failed == 0

if __name__ == "__main__":
    success = run_complete_tests()
    sys.exit(0 if success else 1)
