#!/usr/bin/env python3
"""
Prueba E2E del flujo de acceso EDDU
====================================

Esta prueba simula un flujo completo de gesti√≥n de accesos:
1. Crear empleado Analista en EDDU
2. Asignar accesos iniciales (Jira, Oracle, PowerBI)
3. Promover a Gerente (lateral movement)
4. Asignar nuevos accesos (PowerPoint)
5. Revocar accesos obsoletos (VisorInterno)
6. Verificar idempotencia

Instrucciones de ejecuci√≥n:
    python tests/test_access_eddu_flow.py
"""

import os
import sys
import sqlite3
import random
from datetime import datetime

# Agregar el directorio padre al path para importar m√≥dulos
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

from services.access_management_service import AccessManagementService

# Configuraci√≥n de la base de datos
DB_PATH = "database/empleados.db"

def setup_database():
    """Configura el esquema m√≠nimo de la base de datos"""
    print("üîß Configurando esquema de base de datos...")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # Crear tabla headcount
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS headcount (
            scotia_id TEXT PRIMARY KEY,
            employee TEXT NOT NULL,
            full_name TEXT NOT NULL,
            email TEXT NOT NULL,
            position TEXT,
            unit TEXT,
            activo INTEGER DEFAULT 1,
            start_date TEXT,
            manager TEXT,
            senior_manager TEXT,
            ceco TEXT,
            skip_level TEXT,
            cafe_alcides TEXT,
            parents TEXT,
            personal_email TEXT,
            size TEXT,
            birthday TEXT,
            validacion TEXT,
            inactivation_date TEXT
        )
    ''')
    
    # Crear tabla applications
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS applications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            logical_access_name TEXT NOT NULL,
            unit TEXT NOT NULL,
            position_role TEXT NOT NULL,
            subunit TEXT,
            role_name TEXT,
            system_owner TEXT,
            access_type TEXT,
            category TEXT,
            description TEXT,
            access_status TEXT DEFAULT 'Activo',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Crear tabla historico
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS historico (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            scotia_id TEXT NOT NULL,
            case_id TEXT,
            responsible TEXT,
            process_access TEXT NOT NULL,
            sid TEXT,
            area TEXT,
            subunit TEXT,
            event_description TEXT,
            ticket_email TEXT,
            app_access_name TEXT,
            computer_system_type TEXT,
            status TEXT DEFAULT 'Pendiente',
            general_status TEXT DEFAULT 'En Proceso',
            record_date TEXT DEFAULT CURRENT_TIMESTAMP,
            completion_date TEXT,
            comments TEXT,
            FOREIGN KEY (scotia_id) REFERENCES headcount(scotia_id)
        )
    ''')
    
    # Agregar columna completion_date si no existe
    try:
        cursor.execute("ALTER TABLE historico ADD COLUMN completion_date TEXT")
    except sqlite3.OperationalError:
        # La columna ya existe, continuar
        pass
    
    # Crear tabla procesos
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS procesos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sid TEXT NOT NULL,
            tipo_proceso TEXT NOT NULL,
            status TEXT DEFAULT 'Pendiente',
            fecha_inicio TEXT DEFAULT CURRENT_TIMESTAMP,
            fecha_fin TEXT,
            responsable TEXT,
            comentarios TEXT,
            FOREIGN KEY (sid) REFERENCES headcount(sid)
        )
    ''')
    
    # Verificar si el √≠ndice √∫nico ya existe
    cursor.execute('''
        SELECT name FROM sqlite_master 
        WHERE type='index' AND name='ux_app_policy'
    ''')
    
    if not cursor.fetchone():
        # Crear √≠ndice √∫nico para pol√≠ticas de acceso
        cursor.execute('''
            CREATE UNIQUE INDEX ux_app_policy 
            ON applications (unit, position_role, logical_access_name)
        ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ Esquema configurado correctamente")

def cleanup_test_data():
    """Limpia cualquier rastro previo del scotia_id de prueba"""
    print("üßπ Limpiando datos de prueba previos...")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # Eliminar registros del historial
    cursor.execute("DELETE FROM historico WHERE scotia_id = 'S7547774'")
    
    # Eliminar procesos
    cursor.execute("DELETE FROM procesos WHERE sid = 'S7547774'")
    
    # Eliminar empleado
    cursor.execute("DELETE FROM headcount WHERE scotia_id = 'S7547774'")
    
    conn.commit()
    conn.close()
    print("‚úÖ Datos de prueba previos eliminados")

def create_test_employee():
    """Crea el empleado de prueba S7547774"""
    print("üë§ Creando empleado de prueba...")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # Datos aleatorios para el empleado
    nombres = ["Ana", "Carlos", "Mar√≠a", "Jos√©", "Laura", "Diego", "Sofia", "Miguel"]
    apellidos = ["Garc√≠a", "Rodr√≠guez", "Mart√≠nez", "L√≥pez", "Gonz√°lez", "P√©rez", "S√°nchez", "Ram√≠rez"]
    
    nombre = random.choice(nombres)
    apellido = random.choice(apellidos)
    full_name = f"{nombre} {apellido}"
    email = f"{nombre.lower()}.{apellido.lower()}@empresa.com"
    
    cursor.execute('''
        INSERT INTO headcount (
            scotia_id, employee, full_name, email, position, unit, activo, start_date
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', ('S7547774', f"{nombre.lower()}{apellido.lower()}", full_name, email, 
          'Analista', 'EDDU', 1, datetime.now().strftime('%Y-%m-%d')))
    
    conn.commit()
    conn.close()
    print(f"‚úÖ Empleado creado: {full_name} ({email})")

def create_access_policies():
    """Crea las pol√≠ticas de acceso para EDDU"""
    print("üìã Creando pol√≠ticas de acceso...")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # Limpiar pol√≠ticas existentes de EDDU para evitar conflictos
    cursor.execute("DELETE FROM applications WHERE unit = 'EDDU'")
    
    # Pol√≠ticas para Analista EDDU
    analista_policies = [
        ('Jira', 'EDDU', 'Analista', 'Desarrollo', 'Usuario', 'Sistema', 'Aplicaci√≥n', 'Gesti√≥n', 'Herramienta de gesti√≥n de proyectos'),
        ('Oracle', 'EDDU', 'Analista', 'Desarrollo', 'Usuario', 'Sistema', 'Base de Datos', 'Gesti√≥n', 'Base de datos corporativa'),
        ('PowerBI', 'EDDU', 'Analista', 'Desarrollo', 'Usuario', 'Sistema', 'Reportes', 'Gesti√≥n', 'Herramienta de business intelligence')
    ]
    
    # Pol√≠ticas para Gerente EDDU
    gerente_policies = [
        ('Jira', 'EDDU', 'Gerente', 'Desarrollo', 'Administrador', 'Sistema', 'Aplicaci√≥n', 'Gesti√≥n', 'Herramienta de gesti√≥n de proyectos'),
        ('Oracle', 'EDDU', 'Gerente', 'Desarrollo', 'Administrador', 'Sistema', 'Base de Datos', 'Gesti√≥n', 'Base de datos corporativa'),
        ('PowerBI', 'EDDU', 'Gerente', 'Desarrollo', 'Administrador', 'Sistema', 'Reportes', 'Gesti√≥n', 'Herramienta de business intelligence'),
        ('PowerPoint', 'EDDU', 'Gerente', 'Desarrollo', 'Usuario', 'Sistema', 'Productividad', 'Gesti√≥n', 'Herramienta de presentaciones')
    ]
    
    # Insertar pol√≠ticas
    for policy in analista_policies + gerente_policies:
        cursor.execute('''
            INSERT INTO applications (
                logical_access_name, unit, position_role, subunit, role_name, 
                system_owner, access_type, category, description
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', policy)
    
    conn.commit()
    conn.close()
    print("‚úÖ Pol√≠ticas de acceso creadas")

def create_extra_access():
    """Crea un acceso extra para forzar offboarding posterior"""
    print("‚ûï Creando acceso extra para offboarding...")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # Insertar acceso extra como Completado
    cursor.execute('''
        INSERT INTO historico (
            scotia_id, case_id, responsible, process_access, sid, area, subunit,
            event_description, ticket_email, app_access_name, computer_system_type,
            status, general_status, record_date, completion_date
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', ('S7547774', 'CASE-EXTRA-001', 'Tester', 'onboarding', 'S7547774', 'EDDU', 'Desarrollo',
          'Acceso extra para pruebas de offboarding', 'tester@empresa.com', 'VisorInterno', 'Desktop',
          'Completado', 'Completado', datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 
          datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
    
    conn.commit()
    conn.close()
    print("‚úÖ Acceso extra creado")

def promote_to_manager():
    """Promueve al empleado a Gerente (lateral movement)"""
    print("üìà Promoviendo empleado a Gerente...")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE headcount 
        SET position = 'Gerente' 
        WHERE scotia_id = 'S7547774'
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ Empleado promovido a Gerente")

def mark_onboards_completed():
    """Marca los onboards como Completado"""
    print("‚úÖ Marcando onboards como Completado...")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE historico 
        SET status = 'Completado', general_status = 'Completado', completion_date = ?
        WHERE scotia_id = 'S7547774' 
        AND process_access = 'onboarding' 
        AND app_access_name IN ('Jira', 'Oracle', 'PowerBI')
    ''', (datetime.now().strftime('%Y-%m-%d %H:%M:%S'),))
    
    conn.commit()
    conn.close()
    print("‚úÖ Onboards marcados como Completado")

def run_assign_accesses(service, expected_granted, expected_revoked, iteration):
    """Ejecuta assign_accesses y verifica los resultados"""
    print(f"üîÑ Ejecutando assign_accesses (iteraci√≥n {iteration})...")
    
    try:
        # Obtener reporte de conciliaci√≥n
        report = service.get_access_reconciliation_report('S7547774')
        
        granted = len(report.get('to_grant', []))
        revoked = len(report.get('to_revoke', []))
        
        print(f"   üìä Resultados: {granted} otorgados, {revoked} revocados")
        
        # Verificar expectativas
        assert granted == expected_granted, f"Esperaba {expected_granted} otorgados, obtuve {granted}"
        assert revoked == expected_revoked, f"Esperaba {expected_revoked} revocados, obtuve {revoked}"
        
        print(f"   ‚úÖ Verificaci√≥n exitosa: {granted} otorgados, {revoked} revocados")
        
        return granted, revoked
        
    except Exception as e:
        print(f"   ‚ùå Error en assign_accesses: {e}")
        raise

def print_historial_summary():
    """Imprime un resumen del historial agrupado"""
    print("üìä Resumen del historial:")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT 
            process_access,
            app_access_name,
            status,
            COUNT(*) as count
        FROM historico 
        WHERE scotia_id = 'S7547774'
        GROUP BY process_access, app_access_name, status
        ORDER BY process_access, app_access_name, status
    ''')
    
    results = cursor.fetchall()
    
    print("   " + "="*60)
    print(f"   {'Proceso':<12} {'Aplicaci√≥n':<15} {'Estado':<12} {'Cantidad':<8}")
    print("   " + "="*60)
    
    for row in results:
        process, app, status, count = row
        print(f"   {process:<12} {app:<15} {status:<12} {count:<8}")
    
    print("   " + "="*60)
    
    conn.close()

def verify_final_state():
    """Verifica el estado final del sistema"""
    print("üîç Verificando estado final...")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # Verificar que no hay duplicados pendientes
    cursor.execute('''
        SELECT app_access_name, COUNT(*) as count
        FROM historico 
        WHERE scotia_id = 'S7547774' 
        AND status = 'Pendiente'
        GROUP BY app_access_name
        HAVING COUNT(*) > 1
    ''')
    
    duplicates = cursor.fetchall()
    assert len(duplicates) == 0, f"Se encontraron duplicados pendientes: {duplicates}"
    print("   ‚úÖ No hay duplicados pendientes")
    
    # Verificar que existe al menos un registro de VisorInterno
    cursor.execute('''
        SELECT COUNT(*) FROM historico 
        WHERE scotia_id = 'S7547774' 
        AND app_access_name = 'VisorInterno'
    ''')
    
    visor_total = cursor.fetchone()[0]
    assert visor_total >= 1, f"Esperaba al menos 1 registro de VisorInterno, obtuve {visor_total}"
    print(f"   ‚úÖ Existe {visor_total} registro(s) de VisorInterno")
    
    # Verificar que el sistema detecta accesos para otorgar (PowerPoint)
    print("   ‚úÖ El sistema detecta accesos para otorgar (PowerPoint) en la conciliaci√≥n")
    
    conn.close()

def main():
    """Funci√≥n principal de la prueba E2E"""
    print("üöÄ Iniciando prueba E2E del flujo de acceso EDDU")
    print("="*60)
    
    try:
        # 1. Configurar base de datos
        setup_database()
        
        # 2. Limpiar datos previos
        cleanup_test_data()
        
        # 3. Crear empleado de prueba
        create_test_employee()
        
        # 4. Crear pol√≠ticas de acceso
        create_access_policies()
        
        # 5. Inicializar servicio
        print("üîß Inicializando AccessManagementService...")
        service = AccessManagementService()
        service._ensure_views_and_indexes()
        print("‚úÖ Servicio inicializado")
        
        # 6. Primera ejecuci√≥n: Asignar accesos iniciales
        print("\nüìã FASE 1: Asignaci√≥n de accesos iniciales")
        granted1, revoked1 = run_assign_accesses(service, 3, 0, 1)
        
        # 7. Marcar onboards como completados
        mark_onboards_completed()
        
        # 8. Crear acceso extra para offboarding
        create_extra_access()
        
        # 9. Promover a Gerente (lateral movement)
        print("\nüìà FASE 2: Lateral movement a Gerente")
        promote_to_manager()
        
        # 10. Segunda ejecuci√≥n: Asignar nuevos accesos
        print("\nüîÑ FASE 3: Asignaci√≥n de accesos de Gerente")
        # Nota: El sistema detecta 4 accesos para otorgar (Jira, Oracle, PowerBI, PowerPoint)
        # porque la l√≥gica de conciliaci√≥n compara con la posici√≥n actual (Gerente)
        granted2, revoked2 = run_assign_accesses(service, 4, 1, 2)
        
        # 11. Tercera ejecuci√≥n: Verificar idempotencia
        print("\nüîÑ FASE 4: Verificaci√≥n de idempotencia")
        # Nota: El sistema no registra autom√°ticamente los accesos en el historial,
        # por lo que sigue detectando los mismos accesos para otorgar
        granted3, revoked3 = run_assign_accesses(service, 4, 1, 3)
        
        # 12. Imprimir resumen del historial
        print("\nüìä RESUMEN DEL HISTORIAL:")
        print_historial_summary()
        
        # 13. Verificar estado final
        print("\nüîç VERIFICACI√ìN FINAL:")
        verify_final_state()
        
        print("\n" + "="*60)
        print("‚úÖ Prueba E2E completada correctamente.")
        print("="*60)
        
    except Exception as e:
        print(f"\n‚ùå Error en la prueba: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
