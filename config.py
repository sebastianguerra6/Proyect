#!/usr/bin/env python3
"""
Configuraci√≥n del sistema para SQL Server
Sistema optimizado para usar √∫nicamente SQL Server
"""
import os
import pyodbc
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime

# =====================================================
# CONFIGURACI√ìN SQL SERVER
# =====================================================

# Configuraci√≥n de SQL Server
SQL_SERVER_CONFIG = {
    'server': 'localhost\\SQLEXPRESS01',  # Instancia SQLEXPRESS
    'database': 'GAMLO_Empleados',
    'username': '',  # No necesario con Windows Authentication
    'password': '',  # No necesario con Windows Authentication
    'driver': '{ODBC Driver 17 for SQL Server}',  # Ajustar seg√∫n tu versi√≥n
    'trusted_connection': 'yes',  # Usar Windows Authentication
    'timeout': 30
}

# =====================================================
# GESTOR DE BASE DE DATOS
# =====================================================

class SQLServerConnection:
    """Clase para conexiones a SQL Server"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or SQL_SERVER_CONFIG
        self.connection_string = self._build_connection_string()
    
    def _build_connection_string(self) -> str:
        """Construye la cadena de conexi√≥n para SQL Server"""
        if self.config.get('trusted_connection', 'no').lower() == 'yes':
            # Autenticaci√≥n de Windows (Trusted Connection)
            return (
                f"DRIVER={self.config['driver']};"
                f"SERVER={self.config['server']};"
                f"DATABASE={self.config['database']};"
                f"Trusted_Connection=yes;"
                f"Timeout={self.config['timeout']};"
            )
        else:
            # Autenticaci√≥n SQL Server con usuario y contrase√±a
            if not self.config.get('username') or not self.config.get('password'):
                raise ValueError("Username y password son requeridos para autenticaci√≥n SQL Server")
            
            return (
                f"DRIVER={self.config['driver']};"
                f"SERVER={self.config['server']};"
                f"DATABASE={self.config['database']};"
                f"UID={self.config['username']};"
                f"PWD={self.config['password']};"
                f"Timeout={self.config['timeout']};"
            )
    
    def get_connection(self) -> pyodbc.Connection:
        """Obtiene una conexi√≥n a la base de datos SQL Server"""
        try:
            return pyodbc.connect(self.connection_string)
        except pyodbc.Error as e:
            print(f"Error conectando a SQL Server: {e}")
            raise
    
    def test_connection(self) -> bool:
        """Prueba la conexi√≥n a la base de datos"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            conn.close()
            return result[0] == 1
        except Exception as e:
            print(f"Error probando conexi√≥n: {e}")
            return False

# =====================================================
# FUNCIONES DE CONFIGURACI√ìN
# =====================================================

def get_database_connection():
    """Retorna la clase de conexi√≥n a SQL Server"""
    return SQLServerConnection()

def test_database_connection():
    """Prueba la conexi√≥n a SQL Server"""
    connection = get_database_connection()
    return connection.test_connection()

def get_connection_info():
    """Retorna informaci√≥n sobre la configuraci√≥n de conexi√≥n"""
    config = SQL_SERVER_CONFIG
    return {
        'type': 'SQL Server',
        'server': config['server'],
        'database': config['database'],
        'authentication': 'Windows Authentication' if config['trusted_connection'] == 'yes' else 'SQL Server Authentication',
        'driver': config['driver']
    }

# =====================================================
# FUNCI√ìN PRINCIPAL
# =====================================================

if __name__ == "__main__":
    print("=== CONFIGURACI√ìN DE CONEXI√ìN SQL SERVER ===")
    
    config = SQL_SERVER_CONFIG
    print(f"üîê Autenticaci√≥n: {'Windows Authentication' if config['trusted_connection'] == 'yes' else 'SQL Server Authentication'}")
    print(f"üñ•Ô∏è  Servidor: {config['server']}")
    print(f"üóÑÔ∏è  Base de datos: {config['database']}")
    print(f"‚è±Ô∏è  Timeout: {config['timeout']} segundos")
    
    print("\n" + "="*50)
    
    # Probar conexi√≥n
    print("üîç Probando conexi√≥n...")
    if test_database_connection():
        print("‚úÖ Conexi√≥n a SQL Server exitosa")
        print("üéØ Sistema listo para usar")
    else:
        print("‚ùå Error conectando a SQL Server")
        print("\nüîß Soluciones posibles:")
        print("   - Verificar que SQL Server est√© ejecut√°ndose")
        print("   - Verificar que el usuario tenga permisos en la base de datos")
        print("   - Verificar la configuraci√≥n del servidor y base de datos")
        print("   - Verificar que la base de datos 'GAMLO_Empleados' exista")